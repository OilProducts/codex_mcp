1. initialize
Request:
{
  "method": "initialize"
}

Response:
{
  "capabilities": {
    "tools": {
      "listChanged": true
    }
  },
  "serverInfo": {
    "name": "codex-mcp-server",
    "title": "Codex",
    "version": "0.42.0",
    "user_agent": "codex_cli_rs/0.42.0 (Mac OS 15.6.1; arm64) ghostty/1.2.0 (mcp-inspector; 0.16.8)"
  }
}

2. tools/list
Request:
{
  "method": "tools/list",
  "params": {}
}

Response:
{
  "tools": [
    {
      "name": "codex",
      "title": "Codex",
      "description": "Run a Codex session. Accepts configuration parameters matching the Codex Config struct.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "approval-policy": {
            "description": "Approval policy for shell commands generated by the model: `untrusted`, `on-failure`, `on-request`, `never`.",
            "type": "string",
            "enum": [
              "untrusted",
              "on-failure",
              "on-request",
              "never"
            ]
          },
          "base-instructions": {
            "description": "The set of instructions to use instead of the default ones.",
            "type": "string"
          },
          "config": {
            "description": "Individual config settings that will override what is in CODEX_HOME/config.toml.",
            "type": "object",
            "additionalProperties": true
          },
          "cwd": {
            "description": "Working directory for the session. If relative, it is resolved against the server process's current working directory.",
            "type": "string"
          },
          "include-plan-tool": {
            "description": "Whether to include the plan tool in the conversation.",
            "type": "boolean"
          },
          "model": {
            "description": "Optional override for the model name (e.g. \"o3\", \"o4-mini\").",
            "type": "string"
          },
          "profile": {
            "description": "Configuration profile from config.toml to specify default options.",
            "type": "string"
          },
          "prompt": {
            "description": "The *initial user prompt* to start the Codex conversation.",
            "type": "string"
          },
          "sandbox": {
            "description": "Sandbox mode: `read-only`, `workspace-write`, or `danger-full-access`.",
            "type": "string",
            "enum": [
              "read-only",
              "workspace-write",
              "danger-full-access"
            ]
          }
        },
        "required": [
          "prompt"
        ]
      }
    },
    {
      "name": "codex-reply",
      "title": "Codex Reply",
      "description": "Continue a Codex conversation by providing the conversation id and prompt.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "conversationId": {
            "description": "The conversation id for this Codex session.",
            "type": "string"
          },
          "prompt": {
            "description": "The *next user prompt* to continue the Codex conversation.",
            "type": "string"
          }
        },
        "required": [
          "conversationId",
          "prompt"
        ]
      }
    }
  ]
}

3. Tools/call
Request:
{
  "method": "tools/call",
  "params": {
    "name": "codex",
    "arguments": {
      "config": {},
      "prompt": "This is a test, please just reply with a greeting."
    },
    "_meta": {
      "progressToken": 0
    }
  }
}

Response:
{
  "content": [
    {
      "type": "text",
      "text": "Hey there!"
    }
  ]
}

EVENTS
{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "",
    "msg": {
      "type": "session_configured",
      "session_id": "0199957a-13b3-72b0-ba17-2611726561d7",
      "model": "gpt-5-codex",
      "reasoning_effort": "high",
      "history_log_id": 75402828,
      "history_entry_count": 93,
      "rollout_path": "/Users/chris/.codex/sessions/2025/09/29/rollout-2025-09-29T08-37-09-0199957a-13b3-72b0-ba17-2611726561d7.jsonl"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "task_started",
      "model_context_window": 272000
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "token_count",
      "info": null,
      "rate_limits": {
        "primary": {
          "used_percent": 0,
          "window_minutes": 299,
          "resets_in_seconds": 17466
        },
        "secondary": {
          "used_percent": 8,
          "window_minutes": 10079,
          "resets_in_seconds": 176884
        }
      }
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning_section_break"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning_delta",
      "delta": "**Preparing"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning_delta",
      "delta": " simple"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning_delta",
      "delta": " greeting"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning_delta",
      "delta": " response"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning_delta",
      "delta": "**"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_reasoning",
      "text": "**Preparing simple greeting response**"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_message_delta",
      "delta": "Hey"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_message_delta",
      "delta": " there"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_message_delta",
      "delta": "!"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "agent_message",
      "message": "Hey there!"
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "token_count",
      "info": {
        "total_token_usage": {
          "input_tokens": 2572,
          "cached_input_tokens": 2048,
          "output_tokens": 9,
          "reasoning_output_tokens": 0,
          "total_tokens": 2581
        },
        "last_token_usage": {
          "input_tokens": 2572,
          "cached_input_tokens": 2048,
          "output_tokens": 9,
          "reasoning_output_tokens": 0,
          "total_tokens": 2581
        },
        "model_context_window": 272000
      },
      "rate_limits": {
        "primary": {
          "used_percent": 0,
          "window_minutes": 299,
          "resets_in_seconds": 17466
        },
        "secondary": {
          "used_percent": 8,
          "window_minutes": 10079,
          "resets_in_seconds": 176884
        }
      }
    }
  }
}

{
  "jsonrpc": "2.0",
  "method": "codex/event",
  "params": {
    "_meta": {
      "requestId": 3
    },
    "id": "3",
    "msg": {
      "type": "task_complete",
      "last_agent_message": "Hey there!"
    }
  }
}

