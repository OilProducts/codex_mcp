Use the codex-async-mcp tools whenever you want Codex to pursue work in parallel or continue running after your own turn ends. Start jobs with `job_start` for anything that benefits from sustained Codex autonomy (code reviews, long analyses, background writing). Collector tools (`job_events`, `job_notifications`) always expect the cursor you last receivedâ€”reuse it to avoid replays and to drive incremental paging. After launching jobs, call `job_wait` (first call omits or sets `cursor` to `0`) so you can yield control and wake only when new completion notices arrive. Once a job completes, use `job_reply` to continue the same Codex session if needed.
